<HTML>
  <HEAD>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <META name="GENERATOR" content="BLOCKNOTE.NET">
    <META name="source">
    <BASEFONT face="Verdana" size="2">
    <TITLE></TITLE><STYLE>BODY { FONT-FAMILY:Verdana; FONT-SIZE:10pt }
P { FONT-FAMILY:Verdana; FONT-SIZE:10pt }
DIV { FONT-FAMILY:Verdana; FONT-SIZE:10pt }
TD { FONT-FAMILY:Verdana; FONT-SIZE:10pt }
</STYLE>
  </HEAD>
<BODY>
<H1>Index object</H1>
<P>Index object in persistent storage.</P><DIV align="left">
<TABLE border="0" cellpadding="4" cellspacing="4" width="100%">
  <TR>
    <TD colspan="2"><STRONG><FONT size="4">Properties</FONT></STRONG></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>length</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">- <EM>integer</EM>, length of an index, number of objects associated represented by the index. Read-only property.</TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>asc</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">- <EM>boolean</EM>, direction of access of objects from the index. Write-only property.</TD>
  </TR>
  <TR>
    <TD width="117" bgcolor=#ffffff valign="top" align="right"><STRONG><EM>[key]</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle"><STRONG>- </STRONG><EM>value</EM>, element of the DbIndex at the <EM>key</EM> position. Read/Write accessor by <EM>key</EM>. <EM>key</EM> has to be of the same type as the type of <EM>DbIndex</EM> object</TD>
  </TR>
  <TR>
    <TD width="117" bgcolor=#ffffff valign="top" align="right"><STRONG><EM>[begin..end]</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle"><STRONG>- </STRONG><EM>keys</EM>, keys of first and last element of the range. Returns slice of DbIndex which contains elements from <EM>start</EM> key and up to <EM>end</EM> key. <BR><EM>begin is a </EM>low<EM> boundary of key value (if null then there is no low boundary)</EM>.<BR><EM>end</EM> is a high boundary of key value (if <EM>null</EM> then there is no high boundary).</TD>
  </TR>
  <TR>
    <TD colspan="2" valign="top"><STRONG><FONT size="4">Methods</FONT></STRONG></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>add</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P>( key, val [, replace: true|false ] ) : true|false</P>
<P>Inserts <EM>val</EM> object into <EM>Index</EM> and associates it with <EM>key</EM> value. Optionally replaces it with existing object if it exists.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>remove</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<DIV>( key [,obj] ) returns: true | false</DIV>
<P>Method removes object <EM>obj</EM> by <EM>key</EM> from the index. Method returns <EM>true</EM> on success, otherwise <EM>false</EM>.<BR>If <EM>Index</EM> is unique, <EM>obj</EM> is optional.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>select</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P>( min-key, max-key [, ascent [, start-inclusive [, end-inclusive]]] ) returns: selection object.</P>
<P>Returns selection in the <EM>Index</EM> based on criteria <EM>min-key, max-key, ascent </EM>or<EM> descent </EM>order<EM>, start-inclusive, end-inclusive</EM>. Default values:</P>
<UL>
<LI><EM>ascent = true</EM></LI>
<LI><EM>start-inclusive = true</EM></LI>
<LI><EM>end-inclusive = true</EM></LI></UL>

<P>Example:<BR>var sel = index.select(minVal, maxVal, true);<BR>for( var obj in sel ) { ... }</P></TD>
  </TR>
</TABLE>
</DIV>
</BODY>
</HTML>