<HTML>
  <HEAD>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <META name="GENERATOR" content="BLOCKNOTE.NET">
    <META name="source">
    <META name="source">
    <BASEFONT face="Verdana" size="2">
    <TITLE></TITLE><STYLE>BODY { FONT-FAMILY:Verdana; FONT-SIZE:10pt }
P { FONT-FAMILY:Verdana; FONT-SIZE:10pt }
DIV { FONT-FAMILY:Verdana; FONT-SIZE:10pt }
TD { FONT-FAMILY:Verdana; FONT-SIZE:10pt }
</STYLE>
  </HEAD>
<BODY>
<H1>String object</H1><DIV align="left">
<TABLE border="0" cellpadding="4" cellspacing="0" width="100%">
  <TR>
    <TD colspan="2" valign="middle"><STRONG><FONT size="4">Properties</FONT></STRONG></TD>
  </TR>
  <TR>
    <TD width="117" bgcolor=#ffffff valign="top" align="right"><EM>length</EM></TD>
    <TD bgcolor=#fffff0 valign="middle">- <EM>integer</EM>, number of characters in the string. Read-only property.</TD>
  </TR>
  <TR>
    <TD width="117" bgcolor=#ffffff valign="top" align="right"><STRONG><EM>[index]</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">- <EM>integer</EM>, code of character at the <EM>index</EM> position, Read-write index accessor. Zero-based index.</TD>
  </TR>
  <TR>
    <TD width="117" bgcolor=#ffffff valign="top" align="right"><STRONG><EM>[begin..end]</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">- <EM>integers</EM>, zero-based indexes of first and last character. Returns string slice contained characters from <EM>start</EM> index and up to but not included <EM>end</EM> index. <EM>Begin</EM> or/and <EM>end</EM> are optional. If begin is ommited then it is assumed to be 0, if end - <EM>length</EM> is used as end value.</TD>
  </TR>
  <TR>
    <TD colspan="2" valign="middle"><STRONG><FONT size="4">Methods</FONT></STRONG></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><EM>toInteger</EM></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>([defaultValue])</STRONG> → &nbsp;integer | defaultValue | (undefined)</P>
<P>Tries to parse content of the string. If parsing failed then returns defaultValue if provided, or undefined value.<BR>toInteger expects string in the following format:</P>
<BLOCKQUOTE>
<P>[<EM>whitespace</EM>] [{<STRONG>+</STRONG> | <STRONG>–</STRONG>}] [<STRONG>0</STRONG> [{ <STRONG>x</STRONG> | <STRONG>X</STRONG> }]] [<EM>digits</EM>]</P></BLOCKQUOTE>
</TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>toFloat</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>([defaultValue])</STRONG> → &nbsp;float | defaultValue | (undefined)</P>
<P>Tries to parse content of the string. If parsing failed then returns defaultValue if provided, or undefined value.<BR>toInteger expects string in the following format:</P>
<BLOCKQUOTE>
<P>[<EM>whitespace</EM>] [<EM>sign</EM>] [<EM>digits</EM>] [<STRONG>.</STRONG><EM>digits</EM>] [ {<STRONG>d</STRONG> | <STRONG>D</STRONG> | <STRONG>e</STRONG> | <STRONG>E</STRONG>}[<EM>sign</EM>]<EM>digits</EM>]</P></BLOCKQUOTE>
</TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>toString</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>()</STRONG> → string</P>
<P>Returns string itself.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>substring</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>(start [,end])</STRONG> → string | undefined</P>
<P><EM>start</EM> and <EM>end </EM>are integers - zero-based indexes of first and last character. Method returns string slice consisting from characters starting from <EM>start</EM> index and up to but not included <EM>end</EM> index. If end is ommited it is interpretted as equal to <EM>length</EM>.</P>
<P>Negative values of <EM>start</EM> or <EM>end</EM> treated as a &quot;right side indexes&quot; thus expression &quot;Script&quot;.substring(0,-1) == &quot;Script&quot; is valid.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>substr</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<DIV><STRONG>(start [,length])</STRONG> → string | undefined</DIV>
<P><EM>start</EM> and <EM>length </EM>are integers. <EM>Start</EM> is zero-based index of first character and length is a number of characters in the slice.</P>
<P>Negative value of <EM>start</EM> interpreted as a &quot;right side index&quot; thus expression &quot;Script&quot;.substr(-6) == &quot;Script&quot; is valid.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>slice</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>(start [,end])</STRONG> → string | undefined</P>
<P>Equivalent of <EM>substring</EM> method.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>concat</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>( [<A>string1</A>[, string2[, <A>.</A><A>.</A><A>.</A> [, <A>stringN</A>]]]] )</STRONG> → string</P>
<P>Returns string consisting from concatenated arguments: &nbsp;<EM>self</EM> + <EM>string1</EM> + <EM>string2</EM> + <EM>string3</EM> +<EM> </EM>…<EM> + stringN</EM>.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>charAt</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>( index )</STRONG> → string.</P>
<P>Returns one character string. Equivalent of substr( index, 1 ). If <EM>index</EM> is out of bounds of the string then <EM>charAt</EM> returns empty string.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>charCodeAt</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>( index )</STRONG> → integer | undefined</P>
<P>Returns (uni)code of character at <EM>index</EM> position.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>indexOf</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>( substring [,start] )</STRONG> → integer</P>
<P>Searches this string for text in <EM>substring</EM>. Returns index of <STRONG>first</STRONG> occurence of <EM>substring</EM> or -1 if not found.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>lastIndexOf</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<DIV><STRONG>( substring [,start] )</STRONG> → integer</DIV>
<P>Searches this string for text in <EM>substring</EM>. Returns index of <STRONG>last</STRONG> occurence of <EM>substring</EM> or -1 if not found.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>localeCompare</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>( what )</STRONG> → integer</P>
<P>Compares this string with <EM>what</EM> string using lexicographic character order.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>match</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>( regexp )</STRONG> → string | array of strings | null value</P>
<DIV>Returns fragment(s) of the string which satisfy <EM>regexp</EM>.</DIV></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>replace</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><A>( regexp</A>, <A>replaceBy</A> ) → string</P>
<P>Returns copy of the string where all fragments satisfying <EM>regexp</EM> replaced by <EM>replaceBy</EM>.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>search</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>( regexp )</STRONG> → integer</P>
<P>Returns index of first occurence of string fragment satisfying <EM>regexp</EM> or -1 if not found.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>split</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>(<A>separator</A>[, <A>limit</A>])</STRONG> → string</P>
<P>Splits the string separated on components by <EM>separator</EM>. <EM>Separator</EM> is either regexp object or string. Returns array of strings - substrings between separators. Limit is an integer - maximum number of elements in returned array.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>fromCharCode</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>([<A>code1</A>[, code2[, <A>.</A><A>.</A><A>.</A>[, <A>codeN</A>]]]])</STRONG> → string</P>
<P>Static method. Returns string build from character with given integer <EM>codes.</EM></P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>toLowerCase</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>()</STRONG> → string</P>
<P>Returns lower case copy of the string.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>toUpperCase</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<DIV><STRONG>()</STRONG> → string</DIV>
<P>Returns upper case copy of the string.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>urlEscape</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>()</STRONG> → string</P>
<P>Returns <A href="http://pdos.csail.mit.edu/rover/RoverDoc/escape_url_table.html">url-escaped</A> copy of the string if it contains characters need to be escaped or string itself if there are no such characters.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>urlUnescape</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<DIV><STRONG>()</STRONG> → string</DIV>
<P>Restores url-escaped string.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>htmlEscape</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P><STRONG>()</STRONG> → string</P>
<P>Returns string where each <FONT size="3">&lt; &gt; &amp; &quot; </FONT>or<FONT size="3"> '</FONT> &nbsp;character replaced by <EM>&amp;lt;</EM> <EM>&amp;gt;</EM> <EM>&amp;amp;</EM> <EM>&amp;quot;</EM> or <EM>&amp;apos;</EM> sequence.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><STRONG><EM>htmlUnescape</EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<DIV><STRONG>()</STRONG> → string</DIV>
<P>Returns string where <A href="http://www.w3.org/TR/REC-html40/sgml/entities.html">html entities</A> replaced by correspondent character codes.</P></TD>
  </TR>
  <TR>
    <TD bgcolor=#ffffff valign="top" align="right"><A name="printf"><STRONG><EM>printf</EM></STRONG></A></EM></STRONG></TD>
    <TD bgcolor=#fffff0 valign="middle">
<P>( format, [<A>value1</A>[, value2[, <A>.</A><A>.</A><A>.</A>[, <A>valueN</A>]]]]) → string</P>
<P>Static method. Returns string formatted by the rules of <A href="http://www.cplusplus.com/ref/cstdio/printf.html" target="_blank">sprintf C/C++ function</A>.</P>
<DIV>Additional format types:</DIV>
<UL>
<LI><P><STRONG>%v</STRONG> and <STRONG>%V</STRONG> - these format types accept any value as an argument and produce source code representation of the value suitable for later parsing by eval() method. Thus if value is an array of values it will be printed as &quot;[element1, element2, element3... elementN]&quot; and object (instance of Object class) will be printed as &quot;{key1:value1, key2:value2,..., keyN:valueN}&quot;. %v produces one line output and %V tries to produce human readable output with line feeds and tabulations.<BR>Use it if you need to serialize objects in AJAX/JSON fashion.</P></LI>
<LI><P><STRONG>%S</STRONG> - this format type converts its argument into string and outputs it with <EM>HTML escapement</EM>. So characters like '&lt;' will be converted to &quot;&amp;lt;&quot; sequences in the output.</P></LI></UL>
</TD>
  </TR>
</TABLE>
</DIV>
</BODY>
</HTML>