
//|
//| String test
//|

function String_test()
{
  var s0 = "hello";
  var s1 = "world";
  var s2 = s0.concat(" ",s1);
  
  assert s2 == "hello world";
  
  assert s0.indexOf("l") == 2;
  assert s0.indexOf("h") == 0;
  assert s0.indexOf("h",1) < 0;
  
  assert s0.lastIndexOf("l") == 3;
  assert s0.lastIndexOf("o") == 4;
  
  assert s0.charAt(2) == "l";
  assert s0.charCodeAt(2) == 0x6C;
  
  assert String.fromCharCode(112, 108, 97, 105, 110) == "plain";
  
  // range test
  var s3 = "hello world";
  assert s3[2..5] == "llo";
  assert s3[..5]  == "hello";
  assert s3[6..]  == "world";
  
  var r, re1;         
  var s = "The rain in Spain falls mainly in the plain";
  re1 = /ain/i;     //Create regular expression pattern.
  r = s.match(re1);  //Attempt match on search string.
  assert r == "ain";
  
  var re = /ain/ig;      
  r = s.match(re);   
  assert r.length == 4;
 
  assert s.replace(re,"1") == "The r1 in Sp1 falls m1ly in the pl1";
   
  assert s.search( "Spain" ) == 12;
  assert s.search( "Russia" ) == -1;
  
  assert s.slice( -5 ) == "plain";
  assert s.slice( 12, 17 ) == "Spain";
  assert s.slice( 3 ) == " rain in Spain falls mainly in the plain";
  
  assert s.split( " " ).length == 9;
  assert s.split( re1 ).length == 5;
    
  assert s.substr(12, 5) == "Spain";
  assert s.substring(12, 17) == "Spain";

  assert "This is a STRING object".toLowerCase() == "this is a string object"; 
  assert "This is a STRING object".toUpperCase() == "THIS IS A STRING OBJECT"; 
  
  assert "This is a STRING object".toString() == "This is a STRING object"; 
  assert "This is a STRING object".valueOf() == "This is a STRING object"; 
  
  assert "Hello" + (1).toString() == "Hello1"; 
  
  // string car/cdr operators:
  r = "one,two,three" ~/ ",";   assert r == "one" : "car";  
  r = "one,two,three" ~% ",";   assert r == "two,three" : "cdr";  
  // reversed string car/cdr operators (search from tail):  
  r = "one,two,three" /~ ",";   assert r == "one,two" : "rcar";  
  r = "one,two,three" %~ ",";   assert r == "three" : "rcdr";  
  
  // delimeter string not found cases:
  r = "one,two,three" ~/ "A";   assert r == "one,two,three" : "car NF";  
  r = "one,two,three" ~% "A";   assert r == ""              : "cdr NF";  
  r = "one,two,three" /~ "A";   assert r == "one,two,three" : "rcar NF";  
  r = "one,two,three" %~ "A";   assert r == ""              : "rcdr NF";  

}

function Array_test()
{
  var a0 = [1,2,3,4,5,6,7,8,9,10];
  var a1 = new Array(1,2,3,4,5,6,7,8,9,10);
  
  //stdout.printf("%v\n", a1);
  
  var x1 = [2,3,4];
  var x2 = [1,2,3];
  var x3 = [8,9,10];
  
  // range test
  assert a0[1..4] == x1;
  assert a0[..3] == x2;
  assert a0[7..] == x3;
  
  assert a0.length == 10 : "ctor1a, length=" + a0.length; 
  assert a0[9] == 10; 
  assert a0[0] == 1; 
  assert a1.length == 10 : "ctor2a, array=" + a1; 
  assert a1[9] == 10; 
  assert a1[0] == 1; 
  
  assert a0.first == 1; 
  assert a0.last == 10; 
  
  assert a0.pop() == 10;  assert a0.last == 9; 
  assert a0.shift() == 1; assert a0.first == 2; 
  
  a0.push(10);    assert a0.last == 10; 
  a0.unshift(1);  assert a0.first == 1; 
  assert a0.length == 10; 
  
  var a2 = [0,1,2];
  a2 = a2.concat(3,4,5);
  assert a2.length == 6; 
  assert a2.first == 0 && a2.last == 5; 
  
  assert a2.join("-") == "0-1-2-3-4-5";
  
  a2.reverse(); 
  assert a2.first == 5 && a2.last == 0 : "reverse!"; 
  
  var a3 = [2,3,4];
  assert a0.slice( 1,4 ) == a3;
  
  var a4 = a1.splice(1,3); 
  assert a4 == a3       : "splice1";
  assert a1.length == 7 : "splice2";
  assert a1[1] == 5     : "splice3";
  assert a1.last == 10  : "splice4";
  
  var a5 = [10,9,8,7,6,5,4,3,2,1];
  var a6 = a5.clone();
  var a7 = a5.clone();
  a5.sort();
  assert a5 == a0;
  
  function more(v1,v2)
  {
    return v2 - v1;
  } 
  a5.sort(more);
  assert a5 == a6;

  a7.sort( :v1,v2: v1-v2 );
  assert a7 == a0 : String.printf("sort3 with lambda, arrays are %v %v\n", a7, a0);

  assert a0.toLocaleString() == a0.toString() : "toLocaleString | toString";
  
  var sum = 0;
  for( var el in [10,20,30] ) sum += el;
  assert sum == 60 : "for(var in array)";

  var a10 = [1,2,3,4,5,6,7,8,9,10];
  a10.remove(1);
  assert a10 == [1,3,4,5,6,7,8,9,10];
  a10.removeByValue(5);
  assert a10 == [1,3,4,6,7,8,9,10];
}

function Integer_test()
{
  var imax = Integer.MAX;
  var imin = Integer.MIN;
  if(imax != 2147483647) throw "Integer.MAX"; 
  if(imin != -2147483647-1) throw "Integer.MIN"; 
  
  if("314".toInteger() != 314 ) throw "toInteger"; 
  if("ABC".toInteger() != undefined ) throw "toInteger not integer string"; 
  if("ABC".toInteger(314) != 314 ) throw "toInteger not integer string, default value"; 
  
  if(2006 % 100 != 6 ) throw "remainder!"; 
  
  if(Integer.max(3,1,4) != 4 ) throw "Integer.max"; 
  if(Integer.min(3,1,4) != 1 ) throw "Integer.min"; 

  if(Integer.max(3,1,4,[5,6,7]) != 7 ) throw "Integer.max sub array"; 
  if(Integer.min(3,1,4,[0,-1,-2]) != -2) throw "Integer.min sub array"; 
}

function Float_test()
{
  var fmax = Float.MAX;
  var fmin = Float.MIN;
 
  if(fmax.toString() != "1.#INF") throw "Float.MAX"; 
  if(fmin.toString() != "-1.#INF") throw "Float.MIN"; 
  
  if("3.14".toFloat() != 3.14 ) throw "toFloat"; 
  if("ABC".toFloat() != undefined ) throw "toFloat not float string"; 
  if("ABC".toFloat(3.14) != 3.14 ) throw "toFloat not float string, default value"; 
  
  if(Float.max(3.0,1.0,4.0) != 4.0 ) throw "Float.max"; 
  if(Float.min(3.0,1.0,4.0) != 1.0 ) throw "Float.min"; 

  if(Float.max(3.0,1.0,4.0,[5.0,6.0,7.0]) != 7.0 ) throw "Float.max sub array"; 
  if(Float.min(3.0,1.0,4.0,[5.0,6.0,7.0]) != 1.0 ) throw "Float.min sub array"; 
}

class Foo
{
  function this(n = "o1")   { this.one = 1; this._name = n; }
  function foo()            { return "foo"; }
  property name(v)                
          { 
            get { return "foo:" + this._name; } //get part
            set { this._name = v; } // set part
          }
}

class Bar: Foo // type 'Bar' is derived from 'Foo'
{
  function this(n = "o2")   { super(n); this.two = 2; }
  function bar()            { return "bar"; }
  function foo()            { return super.foo() + "bar"; }
  property name(v)          { get return "bar:" + this._name; set this._name = v; }
}


function Object_test()
{

// classic class use cases

  var foo = new Foo();  
  if(foo.one != 1 ) throw "class ctor 1";
  if(foo.foo() != "foo" ) throw "class method 1";
  if(foo.prototype !== Foo) throw "prototype/get 1";
  if(foo.name != "foo:o1") throw "property/get 1";
  foo.name = "O1";
  if(foo.name != "foo:O1") throw "property/set 1";

  var bar = new Bar(); // Bar is derived from Foo 
  
  if(bar.one != 1 ) throw "class ctor 2.1";
  if(bar.two != 2 ) throw "class ctor 2.2";
  if(bar.bar() != "bar" ) throw "class method 2.1";
  if(bar.foo() != "foobar" ) throw "class method 2.2";  
  if(bar.prototype !== Bar) throw "prototype/get 2";
  if(bar.name != "bar:o2") throw "property/get 2";
  
  bar.name = "O2";
  
  
  if(bar.name != "bar:O2") throw "property/set 2";
  
  if( typeof bar != #object ) throw "typeof";
  if( !(bar instanceof Bar) ) throw "instanceof 1";
  if( !(bar instanceof Foo) ) throw "instanceof 2";


// class literals and dynamic subclassing

  var o = { one:1, two:2, "three":3 };
  if(o.toString() != "[object Object]" ) throw "toString";
  if(o.one != 1 ) throw "literal 1";
  if(o["three"] != 3 ) throw "literal 2";
  
  
  o.prototype = Foo;  // assign class to existing object instance.
                        // yep, it works in the script.
  if(o.foo() != "foo" || o.one != 1 ) throw "dynamic class change";
  
  var oc = o.clone(); // does copy!
  if( oc === o || oc.foo() != "foo" || oc.one != 1 ) throw "clone";
  
  if( !("one" in oc) ) throw "in";
  
  // non JS feature: literals of user defined classes
  var o2 = {:Foo one:1 }; // this is actually short form of var o2 = {prototype:Class, one:1 };
  if(o2.one != 1 ) throw "literal class 1 ";
  if(o2.foo() != "foo" ) throw "literal class 2";
  
  // non JS feature: get element by literal 
  var o3 = { one:1, two:2, three:3, #thirty-three: 33 };
  if(o3[#one] != 1 ) throw "attribute by symbol 1 ";
  // short form of the line above
  if( o3#one != 1 ) throw "attribute by symbol 2 ";
  if( o3#thirty-three != 33 ) throw "attribute by symbol 3 ";
 
}

// test of Undefined Property Handler - a.k.a. Virtual Properties
class TestUPH
{
  function this()
  { 
    this[#one] = 1; // I am using this[#one] notation to avoid call of property undefined() below.
  }
  
  property undefined(name,val) // handler of undefined properties
  {
    get 
    {
      switch( name )
      {  
        case #one: return 11; // shall never be called because of code in ctor
        case #two: return 22; 
        case #three: return 33; 
        default: 
          break; // return precisely nothing - so the property will be handled as ususal
      }
    }
    set
    {
      return true; //"dev>null":  simply suppress any set opperations on unknown properties.
    }
  }
}

function Class_test()
{
  var tst = new TestUPH();  
  if(tst.one != 1 ) throw "class:: handler of undefined properties 1";

  if(tst.two != 22 ) throw "class:: handler of undefined properties 2";
  if(tst.three != 33 ) throw "class:: handler of undefined properties 3";
  tst.three = 44; // should be just ingored beacuse of "dev>null"
  if( tst.three != 33 ) throw "class:: handler of undefined properties 4";

  tst.one = 111;  // this will change prop #one as it was declared for the instance in ctor
  if(tst.one != 111 ) throw "class:: handler of undefined properties 1";  
}


const MY_CONST = 12;

function Const_test() 
{
  if( MY_CONST != 12 ) throw "const 1";
  var got_error = false;
  try { MY_CONST = 13; } catch(e) { got_error = true; }
  if( !got_error ) throw "const 2";

  const MY_LOCAL_CONST = 24;
  if( MY_LOCAL_CONST != 24 ) throw "const 3";
  
  //next line shall produce compile time error.
  //MY_LOCAL_CONST = 25;
  
}


function Date_test() 
{
  var d = new Date();
  stdout.printf("today is:%d-%d-%d %d:%d:%d\n", d.day, d.month, d.year,
      d.hour, d.minute, d.second );
  
  d.day = 28;
  
  stdout.printf("today is:%d-%d-%d %d:%d:%d\n", d.day, d.month, d.year,
      d.hour, d.minute, d.second );
      
  d = new Date("28 Feb 1980 UTC");
  
  if(   d.UTCday != 28 || 
        d.UTCmonth != 2 || 
        d.UTCyear != 1980 ) throw "date ctor";
 
  stdout.printf("date is:%d-%d-%d %d:%d:%d\n", 
      d.day, d.month, d.year,
      d.hour, d.minute, d.second );
      
  stdout.printf("locale format short:%s\nlocale format long:%s\n", d.toLocaleString(), d.toLocaleString(true));
  
  var n = d.valueOf();
  n += 24 * 60 * 60 * 1000.0;
  d = new Date(n);
      
  stdout.printf("date is:%d-%d-%d %d:%d:%d\n", d.day, d.month+1, d.year,
      d.hour, d.minute, d.second );
}

function Function_test()
{
  // var o = 1;
  // arg with the default value test
  
  function DefParams(test = 314)
  {
    return test;
  }
 
  if(DefParams() != 314) throw "Function, default parameters values"; 
  
  // varargs
  function VarArgs(args..)
  {
    //stdout << "args are:" << args;
    //stdout << " typeof args is:" << typeof args << "\n";
    return args.length;
  }
  if(VarArgs(1,2,3) != 3) throw "Function, varargs!"; 

  // varargs, rest
  function VarArgs2(first, restOfArgs..)
  {
    return restOfArgs;
  }
  
  if(VarArgs2(1,2,3) != [2,3]) throw "Function, varargs 2!"; 

  var obj = { one:1, two:2 };
  
  // apply test #1
  function ExtFunc()
  {
    return this.one + this.two;
  }
  if( ExtFunc.apply(obj) != 3) throw "Function, apply (0) failed !"; 
  if( ExtFunc.call(obj) != 3) throw "Function, call (0) failed !"; 

  // apply test #2, additional parameters
  function ExtFunc1(three,four)
  {
    return this.one + this.two + three + four;
  }
  if( ExtFunc1.apply(obj,[3,4]) != 10) throw "Function, apply (1) failed !"; 
  if( ExtFunc1.call(obj,3,4) != 10) throw "Function, call (1) failed !"; 
  
  // arg count length
  if( DefParams.length != 1 ) throw "Function, argc (1) failed!"; 
  if( DefParams.optionals != 1 ) throw "Function, argc (2) failed !"; 
  
  if( VarArgs.length != 0 ) throw "Function, argc (3) failed !"; 
  if( VarArgs.optionals != 0 ) throw "Function, argc (4) failed !"; 

  if( ExtFunc.length != 0 ) throw "Function, argc (5) failed !"; 
  if( ExtFunc.optionals != 0 ) throw "Function, argc (6) failed !"; 

  if( ExtFunc1.length != 2 ) throw "Function, argc (7) failed !"; 
  if( ExtFunc1.optionals != 0 ) throw "Function, argc (8) failed !"; 
  
  // lambda tests
  
  // simplest form 

  var lambda1 = :a,b: a+b;
  
  if( typeof lambda1 != #function) throw "Lambda 1.1 failed !"; 
  if( lambda1(3,4) != 7) throw "Lambda 1.2 failed !"; 
  
  // second form of lambda declaration - block with parameters
  var lambda2 = :a,b { return a+b; }
  if( typeof lambda2 != #function) throw "Lambda 2.1 failed !"; 
  if( lambda2(3,4) != 7) throw "Lambda 2.2 failed !"; 
  
  // third, classic lambda declaration
  var lambda3 = function (a,b) { return a+b; }
  if( typeof lambda3 != #function) throw "Lambda 3.1 failed !"; 
  if( lambda3(3,4) != 7) throw "Lambda 3.2 failed !"; 
  
  // --- 
  // Test of "new Function ([arg1[, arg2[, ... argN]],] functionBody)"
  
  var func1 = new Function("a","b", "return a + b");
  if( typeof func1 != #function) throw "new Function(...) 4.1 failed !"; 
  if( func1(3,4) != 7) throw "new Function(...) 4.2 failed !"; 

  var func2 = new Function("return 2 + 2");
  if( typeof func2 != #function) throw "new Function(...) 4.3 failed !"; 
  if( func2() != 4) throw "new Function(...) 4.4 failed !"; 

  
}



function Stream_test()
{
  var ss = Stream.openString(); // in memory string stream, a.k.a. stram builder
  ss << "one"; 
  ss << "two";
  ss << "three";
  ss.printf("%d%d%d", 1, 2, 3);
  
  if(ss.toString() != "onetwothree123") throw "String Stream!"; 
  
  //too noisy but works
  //var f = Stream.openFile( "tests.js", "r" );
  //if(!f) 
  //{
  //  stdout.printf("unable to open file tests.js\n");
  //  return;
  //}
  //while( true )
  //{
  //  var s = f.readln();
  //  if(s == undefined) break;
  //  stdout.println(s);
  //}
  //stdout.println("------------");
 
  var t = { one:1, two:2, three:3 };
  // print t in format suitable for 'eval'!
  stdout.printf("return %v;\n",t);
  
}

function SocketStream_test()
{
  // will print content of front page:
  var sock = Stream.openSocket( "www.terrainformatica.com:80" );
  
  sock.println("GET http://www.terrainformatica.com/main.whtm HTTP/1.0");
  sock.println("User-Agent: TiScript [en]");
  sock.println("");

  while( true )
  {
    var s = sock.readln();
    if(s == undefined) break;
    stdout.println(s);
  }
  stdout.println(".");
}

namespace NS // namespace
{
  var pi = 314;
  function foo() { return NS.pi; }
  namespace NSS // namespace
  {
    function foo()  { return super.foo() + 1; } // members of parent namespace are accessible by 'super' 
    function bar1() { return NS.foo(); }        // or by fully qualified name. 
    function bar2() { return foo(); }
    function toz1() { return NS.NSS.bar1(); }   // either fully qualified name
    function toz2() { return bar2(); }          // or local (for the namesppace) name.    
  }
}

function Namespace_test()
{
  var t1 = NS.foo();  
  if( t1 != 314 ) throw "namespace 1";
  var t2 = NS.NSS.toz1();  
  if( t2 != 314 ) throw "namespace 2";
  var t3 = NS.NSS.toz2();  
  if( t3 != 315 ) throw "namespace 3 ";
  var t4 = NS.NSS.foo();  
  if( t4 != 315 ) throw "namespace 4";
}


function ExtLoop_test()
{
  var c = 0;
  while:No1 ( c++ < 100 )
  {
    for:No2 (var n = 0; n < 1; ++n) 
    {
      if( c >= 5 ) break No1;
      continue No1;
    }
  }
  if( c != 5 )  throw "named loop #" + c.toString();
}


class superA
{
  function this(p) { this.name = p + "a"; } 
	function foo() { return "A";}
	function bar() { return "a";}  
  function baz() { return "1";}  
}

class superB : superA 
{
  function this(p) { super(p + "b"); } 
  function foo() { return super.foo() + "B";}
  function bar() { return super.bar() + "b";}  
}

class superC : superB 
{
  function this(p) { super(p + "c"); } 
  function foo(){ return super.foo() + "C"; }
  function baz() { return super.baz() + "3";}  
}

function Super_test()
{
  var sc = new superC("d");
  if( sc.name != "dcba") throw "super.this " + sc.name;  
  if( sc.foo() != "ABC" ) throw "super.foo";  
  if( sc.bar() != "ab" ) throw "super.bar";  
  if( sc.baz() != "13" ) throw "super.baz";    
}

run( String_test );
run( Array_test );
run( Const_test );
run( Object_test );
run( Class_test );
run( Date_test );
run( Stream_test );
//This is too noisy, so I've commented it out for a while.
//run( SocketStream_test );
run( Integer_test );
run( Float_test );
run( Function_test );
run( Namespace_test );
run( ExtLoop_test );
run( Super_test );




